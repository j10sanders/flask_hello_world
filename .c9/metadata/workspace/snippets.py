{"filter":false,"title":"snippets.py","tooltip":"/snippets.py","undoManager":{"mark":20,"position":20,"stack":[[{"start":{"row":0,"column":0},"end":{"row":61,"column":10},"action":"insert","lines":["__author__ = 'Jonathan'","import logging","import argparse","import sys","","# Set the log output file, and the log level","logging.basicConfig(filename=\"snippets.log\", level=logging.DEBUG)","","def put(name, snippet):","    \"\"\"","    Store a snippet with an associated name.","","    Returns the name and the snippet","    \"\"\"","    logging.error(\"FIXME: Unimplemented - put({!r}, {!r})\".format(name, snippet))","    return name, snippet","","def get(name):","    \"\"\"Retrieve the snippet with a given name.","","    If there is no such snippet...","","    Returns the snippet.","    \"\"\"","    logging.error(\"FIXME: Unimplemented - get({!r})\".format(name))","    return \"\"","","def main():","    \"\"\"Main function\"\"\"","    logging.info(\"Constructing parser\")","    parser = argparse.ArgumentParser(description=\"Store and retrieve snippets of text\")","","    subparsers = parser.add_subparsers(dest=\"command\", help=\"Available commands\")","","    # Subparser for the put command","    logging.debug(\"Constructing put subparser\")","    put_parser = subparsers.add_parser(\"put\", help=\"Store a snippet\")","    put_parser.add_argument(\"name\", help=\"The name of the snippet\")","    put_parser.add_argument(\"snippet\", help=\"The snippet text\")","","     # Subparser for the get command","    logging.debug(\"Constructing get subparser\")","    get_parser = subparsers.add_parser(\"get\", help=\"Get a snippet\")","    get_parser.add_argument(\"name\", help=\"The name of the snippet\")","","","    arguments = parser.parse_args(sys.argv[1:])","    # Convert parsed arguments from Namespace to dictionary","    arguments = vars(arguments)","    command = arguments.pop(\"command\")","","    if command == \"put\":","        name, snippet = put(**arguments)","        print(\"Stored {!r} as {!r}\".format(snippet, name))","    elif command == \"get\":","        snippet = get(**arguments)","        print(\"Retrieved snippet: {!r}\".format(snippet))","","","","if __name__ == \"__main__\":","    main()"],"id":1}],[{"start":{"row":4,"column":0},"end":{"row":5,"column":0},"action":"insert","lines":["",""],"id":2}],[{"start":{"row":4,"column":0},"end":{"row":4,"column":1},"action":"insert","lines":["i"],"id":3}],[{"start":{"row":4,"column":1},"end":{"row":4,"column":2},"action":"insert","lines":["m"],"id":4}],[{"start":{"row":4,"column":2},"end":{"row":4,"column":3},"action":"insert","lines":["p"],"id":5}],[{"start":{"row":4,"column":3},"end":{"row":4,"column":4},"action":"insert","lines":["o"],"id":6}],[{"start":{"row":4,"column":4},"end":{"row":4,"column":5},"action":"insert","lines":["r"],"id":7}],[{"start":{"row":4,"column":5},"end":{"row":4,"column":6},"action":"insert","lines":["t"],"id":8}],[{"start":{"row":4,"column":6},"end":{"row":4,"column":7},"action":"insert","lines":[" "],"id":9}],[{"start":{"row":4,"column":7},"end":{"row":4,"column":8},"action":"insert","lines":["p"],"id":10}],[{"start":{"row":4,"column":8},"end":{"row":4,"column":9},"action":"insert","lines":["s"],"id":11}],[{"start":{"row":4,"column":9},"end":{"row":4,"column":10},"action":"insert","lines":["y"],"id":12}],[{"start":{"row":4,"column":10},"end":{"row":4,"column":11},"action":"insert","lines":["c"],"id":13}],[{"start":{"row":4,"column":11},"end":{"row":4,"column":12},"action":"insert","lines":["o"],"id":14}],[{"start":{"row":4,"column":12},"end":{"row":4,"column":13},"action":"insert","lines":["p"],"id":15}],[{"start":{"row":4,"column":13},"end":{"row":4,"column":14},"action":"insert","lines":["g"],"id":16}],[{"start":{"row":4,"column":14},"end":{"row":4,"column":15},"action":"insert","lines":["2"],"id":17}],[{"start":{"row":7,"column":65},"end":{"row":8,"column":0},"action":"insert","lines":["",""],"id":18}],[{"start":{"row":8,"column":0},"end":{"row":10,"column":49},"action":"insert","lines":["logging.debug(\"Connecting to PostgreSQL\")","connection = psycopg2.connect(\"dbname='snippets'\")","logging.debug(\"Database connection established.\")"],"id":19}],[{"start":{"row":12,"column":0},"end":{"row":20,"column":0},"action":"remove","lines":["def put(name, snippet):","    \"\"\"","    Store a snippet with an associated name.","","    Returns the name and the snippet","    \"\"\"","    logging.error(\"FIXME: Unimplemented - put({!r}, {!r})\".format(name, snippet))","    return name, snippet",""],"id":20},{"start":{"row":12,"column":0},"end":{"row":20,"column":24},"action":"insert","lines":["def put(name, snippet):","    \"\"\"Store a snippet with an associated name.\"\"\"","    logging.info(\"Storing snippet {!r}: {!r}\".format(name, snippet))","    cursor = connection.cursor()","    command = \"insert into snippets values (%s, %s)\"","    cursor.execute(command, (name, snippet))","    connection.commit()","    logging.debug(\"Snippet stored successfully.\")","    return name, snippet"]}],[{"start":{"row":20,"column":24},"end":{"row":21,"column":0},"action":"insert","lines":["",""],"id":21},{"start":{"row":21,"column":0},"end":{"row":21,"column":4},"action":"insert","lines":["    "]}]]},"ace":{"folds":[],"scrolltop":180,"scrollleft":0,"selection":{"start":{"row":22,"column":14},"end":{"row":22,"column":14},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":11,"state":"start","mode":"ace/mode/python"}},"timestamp":1445816897214,"hash":"2b6f6d16ee2ef06027ec7cf6ec40678ca84fcc2f"}