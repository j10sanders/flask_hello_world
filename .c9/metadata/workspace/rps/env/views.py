{"changed":true,"filter":false,"title":"views.py","tooltip":"/rps/env/views.py","value":"from flask import render_template\n\nfrom blog import app\n\nfrom .database import session, Entry\nfrom flask import flash\nfrom flask.ext.login import login_user, logout_user\nfrom werkzeug.security import check_password_hash\nfrom .database import User\nfrom flask import request, redirect, url_for\nfrom flask.ext.login import login_required, current_user\n\n\nPAGINATE_BY = 10\n\n@app.route(\"/\")\n@app.route(\"/page/<int:page>\")\ndef entries(page=1):\n    print(request.args)\n    try:\n        limit = int(request.args.get(\"limit\", PAGINATE_BY))\n    \n        #try and if get value error, set limit to paginate_by\n        \n        # Zero-indexed page\n        page_index = page - 1\n    \n        count = session.query(Entry).count()\n    \n        start = page_index * limit\n        end = start + limit\n    \n        total_pages = (count - 1) / limit + 1\n        has_next = page_index < total_pages - 1\n        has_prev = page_index > 0\n    \n        entries = session.query(Entry)\n        entries = entries.order_by(Entry.datetime.desc())\n        entries = entries[start:end]\n        \n        return render_template(\"entries.html\",\n            entries=entries,\n            has_next=has_next,\n            has_prev=has_prev,\n            page=page,\n            total_pages=total_pages\n        )\n    except ValueError:\n        flash(u'Try a whole number between 1 - 50!', 'danger')\n        \n        limit = PAGINATE_BY\n        page_index = page - 1\n    \n        count = session.query(Entry).count()\n    \n        start = page_index * limit\n        end = start + limit\n    \n        total_pages = (count - 1) / limit + 1\n        has_next = page_index < total_pages - 1\n        has_prev = page_index > 0\n    \n        entries = session.query(Entry)\n        entries = entries.order_by(Entry.datetime.desc())\n        entries = entries[start:end]\n        \n        return render_template(\"entries.html\",\n            entries=entries,\n            has_next=has_next,\n            has_prev=has_prev,\n            page=page,\n            total_pages=total_pages\n        )\n    \n\n@app.route(\"/entry/add\", methods=[\"GET\"])\n@login_required\ndef add_entry_get():\n    return render_template(\"add_entry.html\")\n\n@app.route(\"/entry/add\", methods=[\"POST\"])\n@login_required\ndef add_entry_post():\n    entry = Entry(\n        title=request.form[\"title\"],\n        content=request.form[\"content\"],\n        author=current_user\n    )\n    session.add(entry)\n    session.commit()\n    return redirect(url_for(\"entries\"))\n    \n@app.route(\"/entry/<id>\", methods=[\"GET\"])\ndef get_entry(id):\n    entry = session.query(Entry)\n\n    return render_template(\"render_entry.html\", entry = entry.get(id))\n    \n@app.route(\"/login\", methods=[\"GET\"])\ndef login_get():\n    return render_template(\"login.html\")\n\n\n@app.route(\"/login\", methods=[\"POST\"])\ndef login_post():\n    email = request.form[\"email\"]\n    password = request.form[\"password\"]\n    user = session.query(User).filter_by(email=email).first()\n    if not user or not check_password_hash(user.password, password):\n        flash(\"Incorrect username or password\", \"danger\")\n        print(\"MWAUAHAH\")\n        return redirect(url_for(\"login_get\"))\n\n    login_user(user)\n    return redirect(request.args.get('next') or url_for(\"entries\"))\n\n@app.route(\"/entry/<id>/edit\", methods=[\"GET\"])\n@login_required\ndef edit_entry_get(id):\n    entry = session.query(Entry)\n    return render_template(\"edit_entry.html\", entry = entry.get(id))\n    \n@app.route(\"/entry/<id>/edit\", methods=[\"POST\"])\n@login_required\ndef edit_entry_post(id):\n    if \"cancel\" in request.form:\n        return redirect(url_for(\"entries\"))\n    else:\n        entry = session.query(Entry).get(id)\n        print(request.form)\n        entry.title = request.form[\"title\"]\n        entry.content = request.form[\"content\"]\n        session.commit()\n        return redirect(url_for(\"entries\"))\n        \n    \n@app.route(\"/entry/<id>/delete\", methods=[\"GET\"])\ndef delete_entry_get(id):\n    entry = session.query(Entry)\n    return render_template(\"delete_entry.html\", entry = entry.get(id))\n        \n@app.route(\"/entry/<id>/delete\", methods=[\"POST\"])\n@login_required\ndef delete_entry_post(id):\n    entry = session.query(Entry).get(id)\n    session.delete(entry)\n    session.commit()\n    return redirect(url_for(\"entries\"))\n    \n@app.route(\"/logout\")\n@login_required\ndef logout():\n    logout_user()\n    flash(u'You are logged out', 'danger')\n    return redirect(url_for(\"entries\"))\n    ","undoManager":{"mark":-2,"position":0,"stack":[[{"start":{"row":2,"column":20},"end":{"row":3,"column":0},"action":"insert","lines":["",""],"id":7}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":2,"column":20},"end":{"row":2,"column":20},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1450551236421}